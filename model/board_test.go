package model

import (
	"reflect"
	"testing"
)

var finishedBoard = [][]int32{
	{0, 0, 0, -1, -1, -1, 1, 0, 1, 1, -1, -1, 0, -1, 0, -1, -1, 1, 0},
	{0, 0, -1, 0, -1, 1, 1, 1, 0, 1, -1, 0, -1, -1, -1, -1, 1, 1, 0},
	{0, 0, -1, -1, -1, 1, 1, 0, 0, 1, 1, -1, -1, 1, -1, 1, 0, 1, 0},
	{0, 0, 0, 0, -1, -1, 1, 0, 1, -1, 1, 1, 1, 1, 1, 0, 1, 0, 0},
	{0, 0, 0, 0, -1, 0, -1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0},
	{0, 0, -1, 0, 0, -1, -1, 1, 0, -1, -1, 1, -1, -1, 0, 1, 0, 0, 1},
	{0, 0, 0, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1},
	{0, 0, -1, 1, 1, 0, 1, -1, -1, 1, 0, 1, -1, 0, 1, -1, -1, -1, 1},
	{0, 0, -1, -1, 1, 1, 1, 0, -1, 1, -1, -1, 0, -1, -1, 1, 1, 1, 1},
	{0, 0, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1},
	{-1, -1, -1, -1, 1, 1, 1, -1, 0, -1, 1, -1, -1, 0, -1, 1, 1, -1, 0},
	{-1, 1, -1, 0, -1, -1, -1, -1, -1, -1, 1, -1, 0, -1, -1, 1, -1, 0, -1},
	{1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 0, 1, -1, 0, -1, 1, -1, -1, 0},
	{0, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1},
	{0, 0, -1, 1, 0, 0, 1, 1, -1, -1, 0, 1, -1, 1, -1, 1, -1, 0, -1},
	{0, 0, 1, 0, 1, 0, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 0},
	{0, 0, 0, 0, 1, 1, 0, 1, -1, 0, -1, -1, 1, 1, 1, 1, -1, -1, -1},
	{0, 0, 1, 1, -1, 1, 1, -1, 0, -1, -1, 1, 1, 1, 1, 0, 1, -1, 1},
	{0, 0, 0, 1, -1, -1, -1, -1, -1, 0, -1, -1, 1, 1, 0, 1, 1, 1, 0},
}

var unfinishedBoard = [][]int32{
	{0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, -1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0},
	{-1, 0, -1, -1, 1, 1, 0, 1, 0, 1, 1, 0, -1, 0, -1, 0, -1, 1, 0},
	{-1, 0, 0, 0, -1, -1, -1, 1, 0, -1, 0, 0, 0, 0, 0, -1, 1, 0, 0},
	{0, -1, 0, -1, 1, 1, 1, -1, -1, 0, 0, -1, 0, 0, -1, 1, 1, 0, 0},
	{-1, 0, -1, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 1, 0, 1, 0},
	{-1, -1, 1, -1, 1, 1, 1, -1, 0, 1, 1, -1, 0, 0, 1, 1, -1, 0, 0},
	{0, 1, 0, -1, 0, -1, 1, -1, 0, 1, -1, 1, 0, 0, 0, 0, -1, 0, 1},
	{0, 0, 0, -1, 0, -1, 1, 1, 0, 1, -1, -1, 0, 0, 0, 1, 1, -1, 0},
	{0, 0, 1, 1, 1, -1, -1, 1, 0, 0, 1, 0, -1, -1, 1, 1, -1, -1, -1},
	{0, -1, -1, -1, 1, 0, 0, 1, 0, 1, 0, 0, -1, 1, 0, 1, 1, -1, 0},
	{0, -1, 1, 1, 1, 1, 0, -1, 1, 0, 0, 0, -1, 1, 0, 0, 1, -1, 0},
	{0, 0, 0, 0, 0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 0, 1, -1, 0},
	{0, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, -1, -1, 0},
	{0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, -1, -1, 1, 1, -1},
	{0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 1, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
}

func TestBoard_GetFloatingStones(t *testing.T) {
	type fields struct {
		width       int32
		height      int32
		captures    []int32
		arrangement [][]int32
	}
	tests := []struct {
		name   string
		fields fields
		want   *VecStack
	}{
		// TODO: Add test cases.
		{
			fields: fields{
				width:       19,
				height:      19,
				captures:    []int32{0, 0},
				arrangement: finishedBoard,
			},
			want: nil,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			board := &Board{
				width:       tt.fields.width,
				height:      tt.fields.height,
				captures:    tt.fields.captures,
				arrangement: tt.fields.arrangement,
			}
			if got := board.GetFloatingStones(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Board.GetFloatingStones() = %v, want %v", got, tt.want)
			}
		})
	}
}
