package influence

import (
	"reflect"
	"testing"
)

func TestGetAreaMap(t *testing.T) {
	type args struct {
		board [][]float32
	}
	tests := []struct {
		name string
		args args
		want [][]float32
	}{
		// TODO: Add test cases.
		{
			name: "should work on a finished game",
			args: args{
				board: FinishedBoard,
			},
			want: [][]float32{
				{-1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1},
				{-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1},
				{-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1},
				{-1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{-1, -1, -1, -1, -1, -1, -1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1},
				{-1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, 1, -1, -1, 0, 1, 1, 1, 1},
				{-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1},
				{-1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 0, 1, -1, 0, 1, -1, -1, -1, 1},
				{-1, -1, -1, -1, 1, 1, 1, 0, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1},
				{-1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1},
				{-1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1},
				{-1, 1, -1, 0, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1},
				{1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 0, -1, 1, -1, -1, 0},
				{0, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1},
				{0, 0, -1, 1, 0, 0, 1, 1, -1, -1, 0, 1, -1, 1, -1, 1, -1, -1, -1},
				{0, 0, 1, 0, 1, 0, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1},
				{0, 0, 0, 0, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1},
				{0, 0, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1},
				{0, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1},
			},
		},
		{
			name: "should work on an unfinished game",
			args: args{
				board: UnfinishedBoard,
			},
			want: [][]float32{
				{0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{1, -1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0},
				{-1, -1, -1, -1, 1, 1, 0, 1, 0, 1, 1, 0, -1, 0, -1, 0, -1, 1, 0},
				{-1, -1, -1, -1, -1, -1, -1, 1, 0, -1, 0, 0, 0, 0, 0, -1, 1, 0, 0},
				{-1, -1, -1, -1, 1, 1, 1, -1, -1, 0, 0, -1, 0, 0, -1, 1, 1, 0, 0},
				{-1, -1, -1, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 1, 0, 1, 0},
				{-1, -1, 1, -1, 1, 1, 1, -1, 0, 1, 1, -1, 0, 0, 1, 1, -1, 0, 0},
				{0, 1, 0, -1, 0, -1, 1, -1, 0, 1, -1, 1, 0, 0, 0, 0, -1, 0, 1},
				{0, 0, 0, -1, 0, -1, 1, 1, 0, 1, -1, -1, 0, 0, 0, 1, 1, -1, 0},
				{0, 0, 1, 1, 1, -1, -1, 1, 0, 0, 1, 0, -1, -1, 1, 1, -1, -1, -1},
				{0, -1, -1, -1, 1, 0, 0, 1, 0, 1, 0, 0, -1, 1, 1, 1, 1, -1, -1},
				{0, -1, 1, 1, 1, 1, 0, -1, 1, 0, 0, 0, -1, 1, 1, 1, 1, -1, -1},
				{0, 0, 0, 0, 0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 1, 1, 1, -1, -1},
				{0, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, -1, -1, -1},
				{0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, -1, -1, 1, 1, -1},
				{0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 1, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := GetAreaMap(tt.args.board); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("GetAreaMap() = %v, want %v", got, tt.want)
			}
		})
	}
}
